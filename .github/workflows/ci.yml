name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: wasm32-wasip1

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --check

    - name: Run lints
      run: cargo clippy --target wasm32-wasip1 -- -D warnings

    - name: Run tests
      run: cargo test

  build:
    name: Build WASM Binary
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: wasm32-wasip1

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build WASM binary
      run: cargo build --target wasm32-wasip1 --release

    - name: Copy WASM artifact
      run: cp target/wasm32-wasip1/release/supertinywasmllm.wasm .

    - name: Upload WASM artifact
      uses: actions/upload-artifact@v4
      with:
        name: supertinywasmllm-wasm
        path: supertinywasmllm.wasm

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download WASM artifact
      uses: actions/download-artifact@v4
      with:
        name: supertinywasmllm-wasm

    - name: Install WasmEdge with GGML plugin
      run: |
        curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | \
        bash -s -- --plugins wasi_nn-ggml
        echo "$HOME/.wasmedge/bin" >> $GITHUB_PATH

    - name: Download test model
      run: |
        # Create a minimal test model for CI
        dd if=/dev/zero of=model.gguf bs=1024 count=100
        echo "GGUF" | dd of=model.gguf conv=notrunc

    - name: Run integration tests
      run: |
        chmod +x test.sh
        ./test.sh
      env:
        SUPERTINYWASMLLM_MODEL_PATH: model.gguf

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download WASM artifact
      uses: actions/download-artifact@v4
      with:
        name: supertinywasmllm-wasm

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'release' }}
        tags: |
          supertinywasmllm/supertinywasmllm:latest
          supertinywasmllm/supertinywasmllm:${{ github.sha }}

  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build, integration-test]
    if: github.event_name == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download WASM artifact
      uses: actions/download-artifact@v4
      with:
        name: supertinywasmllm-wasm

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./supertinywasmllm.wasm
        asset_name: supertinywasmllm.wasm
        asset_content_type: application/wasm 